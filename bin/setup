#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

# SET-UP CONFIGURATION VARIABLES
# ------------------------------
GEM_PATH = "vendor/bundle"

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

# SET-UP SCRIPT
# -------------
FileUtils.chdir APP_ROOT do
  puts "\n## Setting Up Project Environment"

  puts "\n1. Install Bundler"
  system! "bundle version || gem install bundler --conservative"

  puts "\n2. Install Project Gems"
  if ENV["CI"]
    puts "\n2.1. (CI) Fetching gems from cache"
    # Enable deployment mode: https://bundler.io/man/bundle-install.1.html#DEPLOYMENT-MODE
    system("bundle config set --local deployment 'true'")
    # Set gem installation path
    system("bundle config set --local path '#{GEM_PATH}'")
    # Install gems
    system("bundle check || bundle install --with=test --jobs=6 --retry=3")
  else
    system("bundle check") || system!("bundle install --clean --redownload")
  end

  puts "\n3. Install NPM Packages"
  if ENV["CI"]
    system!("yarn install --inmutable")
  else
    system!("yarn install")
  end

  puts "\n4. Set up database"
  system! "bundle exec rails db:drop db:create db:migrate"

  if ENV["CI"]
    puts "\n4.1. Prepare database for tests"
    system! "bundle exec rails db:test:prepare"
  else
    puts "\n4.1. Load fixtures"
    system! "bundle exec rails db:fixtures:load --trace"
  end

  unless ENV["CI"]
    puts "\n4. Remove logs and tmp files"
    system! "bundle exec rails log:clear tmp:clear"
  end

  puts "\n (SUCCESS) Application successfully set up"
  if ENV["CI"]
    puts "\n - CI pipeline will proceed with the next job"
  else
    puts "\n - Run application with command bin/dev"
  end
end
